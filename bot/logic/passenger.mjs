import { Markup } from 'telegraf'
import { addBookingJob } from '../../queue/bookingQueue.mjs'
import { addNotifyJob } from '../../queue/notifyQueue.mjs'
import { formatDate, formatTime } from '../../utils/formatDate.mjs'
import { formatPhone } from '../../utils/formatPhone.mjs'
import { showPassengerMenu } from './common.mjs'
import { initYooCheckout, createCommissionPayment, createRefund } from './payments.mjs'

export function passengerLogic(knex) {
  return async (ctx, next) => {
    if (ctx?.session?.user?.role !== 'passenger') {
      next()
      return
    }
    const callbackQuery = ctx?.update?.callback_query
    try {
      // –ö–æ–º–∞–Ω–¥–∞ "–ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É" (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
      const message = ctx?.session?.previousMessage || ctx.message
      console.log('passengerLogic', message?.text, callbackQuery?.data, ctx.session.state)
      if ((message && message.text === 'üîç –ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É') || (callbackQuery && callbackQuery.data === 'find_trip')) {
        // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        const cities = await knex('cities').orderBy('name', 'asc');
        if (!cities.length) {
          await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.');
          return;
        }
        ctx.session.cities = cities;
        ctx.session.state = 'choose_from_city_keyboard';
        ctx.session.from_city_page = 0;
        // –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const pageSize = 10;
        const showCities = cities.slice(0, pageSize);
        const buttons = showCities.map((c, i) => [{
          text: c.name,
          callback_data: `from_city_${i}`
        }]);
        if (cities.length > pageSize) {
          buttons.push([{ text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: 'from_page_1' }]);
        }
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
          reply_markup: { inline_keyboard: buttons }
        });
        return;
      }
      const data = callbackQuery?.data;

      // ...–¥–∞–ª–µ–µ –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ...
      // –ü—Ä–∏–º–µ—Ä:
      if (ctx.session.state === 'choose_from_city_keyboard' && callbackQuery) {
        const pageSize = 10;
        if (data.startsWith('from_city_')) {
          const idx = parseInt(data.replace('from_city_', ''), 10) + (ctx.session.from_city_page || 0) * pageSize;
          const city = ctx.session.cities && ctx.session.cities[idx];
          if (!city) {
            await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.');
            return;
          }
          ctx.session.from_city_id = city.id;
          ctx.session.state = 'choose_to_city_keyboard';
          // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è (–∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
          const cities = ctx.session.cities.filter(c => c.id !== city.id);
          const page = 0;
          const totalPages = Math.ceil(cities.length / pageSize);
          const showCities = cities.slice(page * pageSize, (page + 1) * pageSize);
          const buttons = showCities.map((c, i) => [{
            text: c.name,
            callback_data: `to_city_${i}`
          }]);
          if (totalPages > 1) {
            buttons.push([{ text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: `to_page_${page + 1}` }]);
          }
          ctx.session.to_city_page = 0;
          ctx.session.to_cities = cities;
          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:', {
            reply_markup: { inline_keyboard: buttons }
          });
          return;
        }
        if (data.startsWith('from_page_')) {
          const page = parseInt(data.replace('from_page_', ''), 10);
          const cities = ctx.session.cities;
          const totalPages = Math.ceil(cities.length / pageSize);
          const showCities = cities.slice(page * pageSize, (page + 1) * pageSize);
          const buttons = showCities.map((c, i) => [{
            text: c.name,
            callback_data: `from_city_${i}`
          }]);
          if (page > 0) buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `from_page_${page - 1}` }]);
          if (page < totalPages - 1) buttons.push([{ text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: `from_page_${page + 1}` }]);
          ctx.session.from_city_page = page;
          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
            reply_markup: { inline_keyboard: buttons }
          });
          return;
        }
        await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
        return;
      }
      // ...–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞...
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è
      if ((ctx.session.state === 'choose_to_city_keyboard') && callbackQuery) {
        const pageSize = 10;
        if (data.startsWith('to_city_')) {
          const idx = parseInt(data.replace('to_city_', ''), 10) + (ctx.session.to_city_page || 0) * pageSize;
          const city = ctx.session.to_cities && ctx.session.to_cities[idx];
          if (!city) {
            await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.');
            return;
          }
          ctx.session.to_city_id = city.id;
          ctx.session.state = 'search_date_choice';
          // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–∞—Ç –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
          const replyCalendarMsg = await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–°–µ–≥–æ–¥–Ω—è', callback_data: 'date_today' },
                  { text: '–ó–∞–≤—Ç—Ä–∞', callback_data: 'date_tomorrow' },
                  { text: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', callback_data: 'date_aftertomorrow' }
                ],
                [
                  { text: '–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É üìÖ', callback_data: 'search_date_calendar' }
                ]
              ]
            }
          });
          ctx.session.calendarReply = {
            messageId: replyCalendarMsg.message_id,
            chatId: replyCalendarMsg.chat.id,
          };
          return;
        }
        if (data.startsWith('to_page_')) {
          const page = parseInt(data.replace('to_page_', ''), 10);
          const cities = ctx.session.to_cities;
          const totalPages = Math.ceil(cities.length / pageSize);
          const showCities = cities.slice(page * pageSize, (page + 1) * pageSize);
          const buttons = showCities.map((c, i) => [{
            text: c.name,
            callback_data: `to_city_${i}`
          }]);
          if (page > 0) buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `to_page_${page - 1}` }]);
          if (page < totalPages - 1) buttons.push([{ text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: `to_page_${page + 1}` }]);
          ctx.session.to_city_page = page;
          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:', {
            reply_markup: { inline_keyboard: buttons }
          });
          return;
        }
        await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
        return;
      }

      // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Å—Å–∞–∂–∏—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
      if ((message && message.text === '–ú–µ–Ω—é –ø–∞—Å—Å–∞–∂–∏—Ä–∞') || data === 'passenger_menu') {
        await showPassengerMenu(ctx)
        ctx.session.state = null;
        if (callbackQuery) await ctx.answerCbQuery();
        return;
      }

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
      console.log('user', ctx.session.user.telegram_id)
      if (message?.text === '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' || callbackQuery?.data === 'my_bookings') {
        const bookings = await knex('bookings')
          .join('trip_instances', 'bookings.trip_instance_id', 'trip_instances.id')
          .join('trips', 'trip_instances.trip_id', 'trips.id')
          .join('cities as dep', 'trips.departure_city_id', 'dep.id')
          .join('cities as arr', 'trips.arrival_city_id', 'arr.id')
          .join('users as drivers', 'trips.driver_id', 'drivers.id')
          .leftJoin('cars', 'trips.car_id', 'cars.id')
          .where('bookings.user_id', ctx.session.user.id)
          .andWhere('bookings.status', 'active')
          .andWhere('trip_instances.status', 'active')
          .select(
            'bookings.id as booking_id',
            'trip_instances.departure_date',
            'trip_instances.departure_time',
            'dep.name as departure_city',
            'arr.name as arrival_city',
            'bookings.seats',
            'trip_instances.price as price',
            'drivers.name as driver_name',
            'drivers.phone as driver_phone',
            'cars.brand as car_brand',
            'cars.model as car_model',
            'cars.color as car_color',
            'cars.license_plate as car_plate',
            'cars.photo_url as car_photo_url'
          )
          .orderBy('trip_instances.departure_date', 'asc');
          console.log('bookings', bookings)
        if (!bookings.length) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
          return;
        }
        // –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        const page = 0;
        const pageSize = 10;
        const totalPages = Math.ceil(bookings.length / pageSize);
        const showBookings = bookings.slice(page * pageSize, (page + 1) * pageSize);
        const buttons = showBookings.map((b, i) => [{
          text: `${formatDate(b.departure_date)} ${formatTime(b.departure_time)} | ${b.departure_city} ‚Üí ${b.arrival_city}`,
          callback_data: `show_booking_${i}`
        }]);
        if (totalPages > 1) {
          buttons.push([
            { text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: `booking_page_${page + 1}` }
          ]);
        }
        ctx.session.bookings = bookings;
        ctx.session.booking_page = 0;
        ctx.session.state = 'show_booking_list';
        await ctx.reply('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
          reply_markup: { inline_keyboard: buttons.concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: 'passenger_menu' }]]) }
        });
        // await ctx.answerCbQuery();
        return;
      }

      // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫
      if (callbackQuery && callbackQuery.data === 'trip_history') {
        const history = await knex('bookings')
            .join('trip_instances', 'bookings.trip_instance_id', 'trip_instances.id')
            .join('trips', 'trip_instances.trip_id', 'trips.id')
            .join('cities as dep', 'trips.departure_city_id', 'dep.id')
            .join('cities as arr', 'trips.arrival_city_id', 'arr.id')
            .join('users as drivers', 'trips.driver_id', 'drivers.id')
            .leftJoin('cars', 'trips.car_id', 'cars.id')
            .where('bookings.user_id', ctx.from.id)
            .andWhere(function() {
              this.where('bookings.status', 'cancelled').orWhere('trip_instances.status', 'completed');
            })
            .select(
              'trip_instances.departure_date',
              'trip_instances.departure_time',
              'dep.name as departure_city',
              'arr.name as arrival_city',
              'bookings.seats',
              'trip_instances.price as price',
              'drivers.name as driver_name',
              'drivers.phone as driver_phone',
              'bookings.status as booking_status',
              'trip_instances.status as trip_status',
              'cars.brand as car_brand',
              'cars.model as car_model',
              'cars.color as car_color',
              'cars.license_plate as car_plate',
              'cars.photo_url as car_photo_url'
            )
            .orderBy('trip_instances.departure_date', 'desc')
            .limit(10);
          if (!history.length) {
            await ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');
            return;
          }
          let msg = '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫:';
          for (let i = 0; i < history.length; i++) {
            const b = history[i];
            let carInfo = '';
            if (b.car_brand || b.car_model || b.car_plate) {
              carInfo = `\n–ê–≤—Ç–æ: ${b.car_brand || ''} ${b.car_model || ''}\n–¶–≤–µ—Ç: ${b.car_color || '-'}\n–ù–æ–º–µ—Ä: ${b.car_plate || '-'}\n`;
            }
            if (b.car_photo_url) {
              await ctx.replyWithPhoto(b.car_photo_url, { caption: `–ê–≤—Ç–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏: ${b.car_brand || ''} ${b.car_model || ''}` });
            }
            msg += `\n\n${i + 1}. ${formatDate(b.departure_date)} ${formatTime(b.departure_time)}\n–ú–∞—Ä—à—Ä—É—Ç: ${b.departure_city} ‚Üí ${b.arrival_city}\n–í–æ–¥–∏—Ç–µ–ª—å: ${b.driver_name} (${b.driver_phone})${carInfo}–ú–µ—Å—Ç: ${b.seats}\n–¶–µ–Ω–∞: ${b.price}‚ÇΩ\n–°—Ç–∞—Ç—É—Å: ${b.booking_status === 'cancelled' ? '–û—Ç–º–µ–Ω–µ–Ω–æ' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}`;
          }
        await ctx.reply(msg, {
          reply_markup: { inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'passenger_menu' }]] }
        });
        ctx.session.state = null;
        await ctx.answerCbQuery();
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      if (ctx.session.state === 'show_booking_list' && callbackQuery) {
        const pageSize = 10;
        if (data.startsWith('show_booking_')) {
          const idx = parseInt(data.replace('show_booking_', ''), 10) + (ctx.session.booking_page || 0) * pageSize;
          const booking = ctx.session.bookings && ctx.session.bookings[idx];
          if (!booking) {
            await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.');
            return;
          }
          ctx.session.selected_booking = booking;
          let carInfo = '';
          if (booking.car_brand || booking.car_model || booking.car_plate) {
            carInfo = `\n–ê–≤—Ç–æ: ${booking.car_brand || ''} ${booking.car_model || ''}\n–¶–≤–µ—Ç: ${booking.car_color || '-'}\n–ù–æ–º–µ—Ä: ${booking.car_plate || '-'}\n`;
          }
          if (booking.car_photo_url) {
            await ctx.replyWithPhoto(booking.car_photo_url, { caption: `–ê–≤—Ç–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏: ${booking.car_brand || ''} ${booking.car_model || ''}` });
          }
          let driverContact = booking.driver_phone ? `\n–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: ${formatPhone(booking.driver_phone)}` : '';
          let msg = `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n–î–∞—Ç–∞: ${formatDate(booking.departure_date)} ${formatTime(booking.departure_time)}\n–ú–∞—Ä—à—Ä—É—Ç: ${booking.departure_city} ‚Üí ${booking.arrival_city}\n–í–æ–¥–∏—Ç–µ–ª—å: ${booking.driver_name}${driverContact}${carInfo}–ú–µ—Å—Ç: ${booking.seats}\n–¶–µ–Ω–∞: ${booking.price}‚ÇΩ`;
          await ctx.reply(msg, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'cancel_booking_confirm' }],
                [{ text: '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'back_to_booking_list' }]
              ]
            }
          });
          await ctx.answerCbQuery();
          return;
        }
        if (data === 'cancel_booking_confirm') {
          await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–î–∞', callback_data: 'cancel_booking_final' }],
                [{ text: '–ù–µ—Ç', callback_data: 'show_booking_0' }]
              ]
            }
          });
          await ctx.answerCbQuery();
          return;
        }
        if (data === 'cancel_booking_final') {
          const booking = ctx.session.selected_booking;
          if (!booking) {
            await ctx.reply('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
          }
          // –ü–æ–ª—É—á–∏—Ç—å trip_instance_id —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          let tripInstanceId = booking.trip_instance_id;
          if (!tripInstanceId) {
            const bookingRow = await knex('bookings').where({ id: booking.booking_id }).first();
            tripInstanceId = bookingRow?.trip_instance_id;
          }
          // –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç
          await knex.transaction(async trx => {
            await trx('bookings').where({ id: booking.booking_id }).update({ status: 'cancelled' });
            await trx('trip_instances').where({ id: tripInstanceId }).increment('available_seats', booking.seats);
          });
          // –ï—Å–ª–∏ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞, –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          const fullBooking = await knex('bookings').where({ id: booking.booking_id }).first();
          if (fullBooking?.payment_id) {
            const pay = await knex('payments').where({ id: fullBooking.payment_id }).first();
            if (pay && pay.status === 'succeeded' && pay.provider_payment_id) {
              const yc = initYooCheckout();
              if (yc) {
                try {
                  const idemp = `refund-booking-${booking.booking_id}-${Date.now()}`;
                  const refund = await createRefund(yc, {
                    providerPaymentId: pay.provider_payment_id,
                    amount: pay.amount,
                    description: `–í–æ–∑–≤—Ä–∞—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏ #${booking.booking_id}`,
                    idempotenceKey: idemp,
                  });
                  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–µ—Å—Ç—Ä –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ (–≤ —Ç–∞–±–ª–∏—Ü–µ payments.raw —É–∂–µ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è, –º–æ–∂–Ω–æ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
                  await knex('payments').where({ id: fullBooking.payment_id }).update({ raw: JSON.stringify({ ...(pay.raw || {}), refund }) });
                  // –ó–∞–ø–∏—à–µ–º –≤ refunds
                  try {
                    await knex('refunds').insert({
                      payment_id: fullBooking.payment_id,
                      booking_id: booking.booking_id,
                      provider_refund_id: refund?.id || null,
                      amount: pay.amount,
                      currency: pay.currency || 'RUB',
                      status: refund?.status || 'created',
                      raw: JSON.stringify(refund || {})
                    });
                  } catch { /* ignore */ }
                  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏
                  await ctx.reply(`–í–æ–∑–≤—Ä–∞—Ç –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω (${pay.amount}‚ÇΩ). –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì7 –¥–Ω–µ–π (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–Ω–∫–∞).`);
                } catch (e) {
                  console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏', e.message);
                }
              }
            }
          }
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
          const driver = await knex('users')
            .join('trips', 'users.id', 'trips.driver_id')
            .join('trip_instances', 'trips.id', 'trip_instances.trip_id')
            .where('trip_instances.id', tripInstanceId)
            .select('users.telegram_id', 'users.name')
            .first();
          if (driver) {
            await addNotifyJob(
              'booking_cancelled',
              driver.telegram_id,
              `–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–µ–∑–¥–∫—É ${booking.departure_city} ‚Üí ${booking.arrival_city} (${formatDate(booking.departure_date)} ${formatTime(booking.departure_time)}).`,
              booking.booking_id
            );
          }
          await ctx.reply('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
          ctx.session.selected_booking = null;
          // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          ctx.session.state = 'show_booking_list';
          // ...existing code to show booking list...
          return;
        }
        if (data.startsWith('booking_page_')) {
          const page = parseInt(data.replace('booking_page_', ''), 10);
          const bookings = ctx.session.bookings;
          const totalPages = Math.ceil(bookings.length / pageSize);
          const showBookings = bookings.slice(page * pageSize, (page + 1) * pageSize);
          const buttons = showBookings.map((b, i) => [{
            text: `${formatDate(b.departure_date)} ${formatTime(b.departure_time)} | ${b.departure_city} ‚Üí ${b.arrival_city}`,
            callback_data: `show_booking_${i}`
          }]);
          if (page > 0) buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `booking_page_${page - 1}` }]);
          if (page < totalPages - 1) buttons.push([{ text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: `booking_page_${page + 1}` }]);
          ctx.session.booking_page = page;
          await ctx.editMessageText('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
            reply_markup: { inline_keyboard: buttons.concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: 'passenger_menu' }]]) }
          });
          await ctx.answerCbQuery();
          return;
        }
        if (data === 'back_to_booking_list') {
          // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          const page = ctx.session.booking_page || 0;
          const bookings = ctx.session.bookings;
          const totalPages = Math.ceil(bookings.length / pageSize);
          const showBookings = bookings.slice(page * pageSize, (page + 1) * pageSize);
          const buttons = showBookings.map((b, i) => [{
            text: `${formatDate(b.departure_date)} ${formatTime(b.departure_time)} | ${b.departure_city} ‚Üí ${b.arrival_city}`,
            callback_data: `show_booking_${i}`
          }]);
          if (totalPages > 1) {
            buttons.push([{ text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data: `booking_page_${page + 1}` }]);
          }
          await ctx.reply('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
            reply_markup: { inline_keyboard: buttons.concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: 'passenger_menu' }]]) }
          });
          await ctx.answerCbQuery();
          return;
        }
        await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
      if (ctx.session.state === 'search_date_choice' && callbackQuery) {
        let date;
        if (callbackQuery.data === 'date_today') {
          date = new Date();
        } else if (callbackQuery.data === 'date_tomorrow') {
          date = new Date(); date.setDate(date.getDate() + 1);
        } else if (callbackQuery.data === 'date_aftertomorrow') {
          date = new Date(); date.setDate(date.getDate() + 2);
        }
        if (date) {
          ctx.session.date = date.toISOString().slice(0, 10);
          ctx.session.state = 'search_date';
          await ctx.answerCbQuery();
          await ctx.reply('–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: ' + formatDate(ctx.session.date));
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–∫
          // ...existing code...
        }
      }

      if (ctx.session.state === 'search_date') {
        // –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–∫ –ø–æ id –≥–æ—Ä–æ–¥–æ–≤
        const trips = await knex('trip_instances')
          .join('trips', 'trip_instances.trip_id', 'trips.id')
          .where({
            'trips.departure_city_id': ctx.session.from_city_id,
            'trips.arrival_city_id': ctx.session.to_city_id,
            'trip_instances.departure_date': ctx.session.date,
            'trip_instances.status': 'active'
          })
          .andWhere('trip_instances.available_seats', '>', 0)
          .select('trip_instances.id', 'trip_instances.departure_time', 'trip_instances.price', 'trip_instances.available_seats', 'trips.seats');
        if (trips.length === 0) {
          await ctx.reply('–ü–æ–µ–∑–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.');
          ctx.session.state = null;
          return;
        }
        let msg = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:';
        const buttons = trips.map((t, i) => [{
          text: `${formatTime(t.departure_time)} | ${t.price}‚ÇΩ | –º–µ—Å—Ç: ${t.available_seats}/${t.seats}`,
          callback_data: `choose_trip_${i}`
        }]);
        trips.forEach((t, i) => {
          msg += `\n${i + 1}. –í—Ä–µ–º—è: ${formatTime(t.departure_time)}, –¶–µ–Ω–∞: ${t.price}‚ÇΩ, –ú–µ—Å—Ç: ${t.available_seats}/${t.seats}`;
        });
        await ctx.reply(msg, {
          reply_markup: {
            inline_keyboard: buttons
          }
        });
        ctx.session.trips = trips;
        ctx.session.state = 'choose_trip_keyboard';
        return;
      }
      // –í—ã–±–æ—Ä –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      if (ctx.session.state === 'choose_trip_keyboard' && callbackQuery && callbackQuery.data.startsWith('choose_trip_')) {
        const idx = parseInt(callbackQuery.data.replace('choose_trip_', ''), 10);
        const trip = ctx.session.trips && ctx.session.trips[idx];
        if (!trip) {
          await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.');
          return;
        }
        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
        const tripDetails = await knex('trip_instances')
          .join('trips', 'trip_instances.trip_id', 'trips.id')
          .join('users as drivers', 'trips.driver_id', 'drivers.id')
          .leftJoin('cars', 'trips.car_id', 'cars.id')
          .join('cities as dep', 'trips.departure_city_id', 'dep.id')
          .join('cities as arr', 'trips.arrival_city_id', 'arr.id')
          .where('trip_instances.id', trip.id)
          .select(
            'trip_instances.id',
            'trip_instances.departure_time',
            'trip_instances.price',
            'trip_instances.available_seats',
            'trip_instances.duration',
            'trip_instances.departure_address',
            'trip_instances.arrival_address',
            'trip_instances.comment',
            'trips.seats',
            'dep.name as departure_city',
            'arr.name as arrival_city',
            'drivers.name as driver_name',
            'cars.brand as car_brand',
            'cars.model as car_model',
            'cars.color as car_color',
            'cars.license_plate as car_plate',
            'cars.photo_url as car_photo_url'
          )
          .first();
        ctx.session.selected_trip = trip;
        ctx.session.selected_trip_details = tripDetails;
        ctx.session.state = 'trip_summary';
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        let carInfo = '';
        if (tripDetails.car_brand || tripDetails.car_model || tripDetails.car_plate) {
          carInfo = `\n–ê–≤—Ç–æ: ${tripDetails.car_brand || ''} ${tripDetails.car_model || ''}\n–¶–≤–µ—Ç: ${tripDetails.car_color || '-'}\n–ù–æ–º–µ—Ä: ${tripDetails.car_plate || '-'}\n`;
        }
  let durationInfo = tripDetails.duration ? `\n–í –ø—É—Ç–∏: ${tripDetails.duration} –º–∏–Ω.` : '';
  let addressInfo = `\n–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${tripDetails.departure_address || '-'}\n–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è: ${tripDetails.arrival_address || '-'}`;
  let commentInfo = tripDetails.comment ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${tripDetails.comment}` : '';
  let msg = `–ü–æ–µ–∑–¥–∫–∞:\n–í—Ä–µ–º—è: ${formatTime(tripDetails.departure_time)}\n–ú–∞—Ä—à—Ä—É—Ç: ${tripDetails.departure_city} ‚Üí ${tripDetails.arrival_city}${addressInfo}${commentInfo}\n–í–æ–¥–∏—Ç–µ–ª—å: ${tripDetails.driver_name}${carInfo}–ú–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: ${tripDetails.available_seats}/${tripDetails.seats}\n–¶–µ–Ω–∞: ${tripDetails.price}‚ÇΩ${durationInfo}`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∞–≤—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        // if (tripDetails.car_photo_url) {
        //   await ctx.replyWithPhoto(tripDetails.car_photo_url, { caption: `–ê–≤—Ç–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏: ${tripDetails.car_brand || ''} ${tripDetails.car_model || ''}` });
        // }
        await ctx.editMessageText(msg, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'book_selected_trip' },
                { text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_trip_list' }
              ]
            ]
          }
        });
        await ctx.answerCbQuery();
        return;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–∫–µ
      if (ctx.session.state === 'trip_summary' && callbackQuery) {
        if (callbackQuery.data === 'book_selected_trip') {
          ctx.session.state = 'choose_seats';
          await ctx.editMessageReplyMarkup(); // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
          await ctx.reply('–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?');
          await ctx.answerCbQuery();
          return;
        }
        if (callbackQuery.data === 'back_to_trip_list') {
          // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–∫
          ctx.session.state = 'choose_trip_keyboard';
          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫
          const trips = ctx.session.trips || [];
          let msg = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:';
          const buttons = trips.map((t, i) => [{
            text: `${formatTime(t.departure_time)} | ${t.price}‚ÇΩ | –º–µ—Å—Ç: ${t.available_seats}/${t.seats}`,
            callback_data: `choose_trip_${i}`
          }]);
          trips.forEach((t, i) => {
            msg += `\n${i + 1}. –í—Ä–µ–º—è: ${formatTime(t.departure_time)}, –¶–µ–Ω–∞: ${t.price}‚ÇΩ, –ú–µ—Å—Ç: ${t.available_seats}/${t.seats}`;
          });
          await ctx.editMessageText(msg, {
            reply_markup: {
              inline_keyboard: buttons
            }
          });
          await ctx.answerCbQuery();
          return;
        }
      }
      if ((ctx.session.state === 'choose_seats' && message && message.text) || ctx?.session.state === 'awaiting_phone' || ctx?.session.state === 'awaiting_phone_input' || ctx?.session.state === 'awaiting_phone_choice') {
        if (!ctx?.session.seats) {
          ctx.session.seats = parseInt(message.text, 10);
        }
        const seats = ctx.session.seats;
        const available = ctx.session.selected_trip?.available_seats;
        if (!seats || seats < 1 || (available && seats > available && seats !== available)) {
          await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—Ç (–æ—Ç 1 –¥–æ ${available || '–¥–æ—Å—Ç—É–ø–Ω–æ'}).`);
          return;
        }
        console.log('user phone', ctx.session?.user)
        if (!ctx.session?.user?.phone && !ctx?.message?.contact) {
          // –ï—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–æ—Å–æ–±, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
          if (ctx.session.state !== 'awaiting_phone_input' && ctx.session.state !== 'awaiting_phone_choice') {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
              reply_markup: {
                keyboard: [
                  [
                    { text: '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é' },
                    Markup.button.contactRequest('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
                  ]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            });
            ctx.session.state = 'awaiting_phone_choice';
            return;
          }
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
        if (ctx.session.state === 'awaiting_phone_choice' && ctx.message && ctx.message.text === '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é') {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:');
          ctx.session.state = 'awaiting_phone_input';
          return;
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç
        if (ctx?.message?.contact) {
          let raw = ctx.message.contact.phone_number.trim();
          raw = raw.replace(/[^+\d]/g,'');
          if (raw.startsWith('8')) raw = '+7' + raw.slice(1);
          if (/^7\d{10}$/.test(raw)) raw = '+' + raw; // 7XXXXXXXXXX -> +7XXXXXXXXXX
          ctx.session.user.phone = raw;
          await knex('users').where({ telegram_id: ctx.from.id }).update({ phone: raw });
          await ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.', { reply_markup: { remove_keyboard: true } });
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä—É—á–Ω—É—é
        if (ctx.session.state === 'awaiting_phone_input' && ctx.message && ctx.message.text) {
          let phone = ctx.message.text.trim();
          phone = phone.replace(/[^+\d]/g,'');
          if (phone.startsWith('8')) phone = '+7' + phone.slice(1);
          if (/^7\d{10}$/.test(phone)) phone = '+' + phone;
          if (!/^\+7\d{10}$/ .test(phone)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.');
            return;
          }
          ctx.session.user.phone = phone;
          await knex('users').where({ telegram_id: ctx.from.id }).update({ phone });
          await ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.', { reply_markup: { remove_keyboard: true } });
          ctx.session.state = null;
        }
        // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        try {
          const tripInstanceId = ctx.session.selected_trip.id;
          const seats = ctx.session.seats;
          const user = await knex('users').where({ telegram_id: ctx.from.id }).first();
          if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          const userId = user.id;
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏–ª–∏ –æ–∂–∏–¥–∞—é—â—É—é –æ–ø–ª–∞—Ç—É –±—Ä–æ–Ω—å
          const existingBooking = await knex('bookings')
            .where({ trip_instance_id: tripInstanceId, user_id: userId })
            .whereIn('status', ['active','pending','awaiting_confirmation'])
            .first();
          if (existingBooking) {
            await ctx.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –ø–æ–µ–∑–¥–∫–∏ (–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã).');
            return;
          }
          // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º pending booking –∞—Ç–æ–º–∞—Ä–Ω–æ
          const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
          const bookingId = await knex.transaction(async trx => {
            const affected = await trx('trip_instances')
              .where({ id: tripInstanceId })
              .andWhere('available_seats','>=', seats)
              .decrement('available_seats', seats);
            if (!affected) throw new Error('NO_SEATS');
            const [id] = await trx('bookings').insert({ trip_instance_id: tripInstanceId, user_id: userId, seats, status: 'pending', expires_at: expiresAt });
            return id;
          }).catch(err => {
            if (err && err.message === 'NO_SEATS') return null;
            throw err;
          });
          if (!bookingId) {
            await ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫.');
            return;
          }
          // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 50‚ÇΩ –∑–∞ –º–µ—Å—Ç–æ (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å COMMISSION_PER_SEAT)
          const COMMISSION_PER_SEAT = parseInt(process.env.COMMISSION_PER_SEAT || '50', 10);
          const commissionAmount = COMMISSION_PER_SEAT * seats;
          const yoo = initYooCheckout();
          let paymentUrl;
          if (yoo) {
            try {
              const idempotenceKey = `booking-${bookingId}-${Date.now()}`;
              const payment = await createCommissionPayment(yoo, {
                amount: commissionAmount,
                description: `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${bookingId}`,
                metadata: { booking_id: bookingId, user_id: userId, trip_instance_id: tripInstanceId, return_url: 'https://t.me/' + ctx.botInfo?.username },
                idempotenceKey
              });
              paymentUrl = payment?.confirmation?.confirmation_url;
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º payment
              const [paymentId] = await knex('payments').insert({ provider: 'yookassa', provider_payment_id: payment.id, amount: commissionAmount, currency: 'RUB', status: payment.status, description: `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${bookingId}`, idempotence_key: idempotenceKey });
              await knex('bookings').where({ id: bookingId }).update({ payment_id: paymentId });
            } catch (err) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', err);
            }
          }
          if (paymentUrl) {
            const minutesLeft = 15; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫–∞
            await ctx.reply(
              `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${bookingId} —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.
–ú–µ—Å—Ç–∞: ${seats}
–ö–æ–º–∏—Å—Å–∏—è: ${commissionAmount}‚ÇΩ (–ø–æ ${COMMISSION_PER_SEAT}‚ÇΩ –∑–∞ –º–µ—Å—Ç–æ)`,
              {
                reply_markup: {
                  inline_keyboard: [[{ text: '–û–ø–ª–∞—Ç–∏—Ç—å', url: paymentUrl }]]
                }
              }
            );
          } else {
            await ctx.reply('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ. –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
          }
          await showPassengerMenu(ctx);
        } catch (e) {
          console.log(e);
          await ctx.reply('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        ctx.session.state = null;
        ctx.session.trips = null;
        ctx.session.selected_trip = null;
        return;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
      if (message && message.text) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Å–±—Ä–æ—Å–∞.');
        return;
      }
      await next();
    } catch (error) {
      console.error('Error in passengerLogic:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }
  }
}
