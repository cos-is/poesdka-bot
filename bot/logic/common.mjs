import { Markup } from 'telegraf'
import { formatPhone } from '../../utils/formatPhone.mjs'
import db from '../../db/db.mjs';
import { getSetting } from '../../utils/getSetting.mjs'

// –û–±—â–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—ã–±–æ—Ä —Ä–æ–ª–∏
export async function showDriverMenu(ctx) {
  // –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –¥–æ–±–∞–≤–ª—è—è "–ë–æ–Ω—É—Å—ã" –µ—Å–ª–∏ –±–∞–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω
  let keyboard = [
    [
      { text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–µ–∑–¥–∫—É' },
      { text: '–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏' }
    ],
    [
      { text: '–ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏' },
    ],
    [
      { text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }
    ]
  ];
  try {
    const row = await db('app_settings').where({ key: 'bonus_banner_url' }).first();
    if (row?.value) {
      keyboard[2].push({ text: '–ë–æ–Ω—É—Å—ã' });
    }
  } catch { /* ignore */ }
  keyboard.push([
    { text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }
  ]);
  keyboard.push([{ text: '–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å' }]);
  await ctx.reply('–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è:', {
    reply_markup: {
      keyboard,
      resize_keyboard: true
    }
  });
  ctx.session.state = null;
}

export async function showPassengerMenu(ctx) {
  await ctx.reply('–ú–µ–Ω—é –ø–∞—Å—Å–∞–∂–∏—Ä–∞:', {
    reply_markup: {
      keyboard: [
        [
          { text: 'üîç –ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É' },
          { text: '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' }
        ],
        // [
        //   { text: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫' }
        // ],
        [
          { text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }
        ],
        [{ text: '–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å' }]
      ],
      resize_keyboard: true
    }
  });
  ctx.session.state = null;
}
export function commonLogic(knex) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  async function handleChangePhone(ctx) {
    const user = ctx.session?.user;
    let phone = user?.phone || '';
    if (!phone) {
      // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
      const dbUser = await knex('users').where({ telegram_id: ctx.from.id }).first();
      phone = dbUser?.phone || '';
    }
    await ctx.reply(`–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone ? formatPhone(phone) : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    await ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:', {
      reply_markup: {
        keyboard: [
          [ { text: '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é' }, Markup.button.contactRequest('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω') ],
          [ { text: '–û—Ç–º–µ–Ω–∞' } ]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
    ctx.session.state = 'change_phone_waiting_choice';
  }
  async function showRoleMenu(ctx) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:', {
      reply_markup: {
        keyboard: [
          ['–í–æ–¥–∏—Ç–µ–ª—å', '–ü–∞—Å—Å–∞–∂–∏—Ä']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
    ctx.session.state = 'choose_role';
  }

  const showUserMenu = async ctx => {
    const role = ctx.session?.user?.role;
    if (role === 'driver') {
  await showDriverMenu(ctx, knex);
    } else if (role === 'passenger') {
      await showPassengerMenu(ctx);
    }
  }


  return async (ctx, next) => {
    const session = ctx.session || {}
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (ctx?.session?.state === 'change_phone_waiting_choice') {
        if (ctx.message && ctx.message.text === '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é') {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:', {
            reply_markup: {
              keyboard: [[ '–û—Ç–º–µ–Ω–∞' ]],
              resize_keyboard: true,
              one_time_keyboard: true
            }
          });
          ctx.session.state = 'change_phone_manual_input';
          return true;
        }
        if (ctx.message && ctx.message.contact) {
          const phone = ctx.message.contact.phone_number;
          await knex('users').where({ telegram_id: ctx.from.id }).update({ phone });
          ctx.session.user.phone = phone;
          await ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!', { reply_markup: { remove_keyboard: true } });
          await showUserMenu(ctx);
          ctx.session.state = null;
          return true;
        }
        if (ctx.message && ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
          ctx.session.state = null;
          await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', { reply_markup: { remove_keyboard: true } });
          return true;
        }
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.');
        return true;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
      if (ctx?.session?.state === 'change_phone_manual_input') {
        if (ctx.message && ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
          ctx.session.state = null;
          await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', { reply_markup: { remove_keyboard: true } });
          return true;
        }
        if (ctx.message && ctx.message.text) {
          const phone = ctx.message.text.trim();
          if (!/^\+7\d{10,14}$/.test(phone)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.');
            return true;
          }
          await knex('users').where({ telegram_id: ctx.from.id }).update({ phone });
          ctx.session.user.phone = phone;
          await ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!', { reply_markup: { remove_keyboard: true } });
          await showUserMenu(ctx);
          ctx.session.state = null;
          return true;
        }
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".');
        return true;
      }
      console.log('start', ctx?.session?.state, ctx?.update?.callback_query?.data)
      try {
        let user = await knex('users').where({ telegram_id: ctx.from.id }).first();
        if (user) {
          session.user = user
        }
        ctx.session = session
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
    if (ctx.message && /^(–æ—Ç–º–µ–Ω–∞|cancel|–Ω–∞–∑–∞–¥|–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é)$/i.test(ctx.message.text)) {
          ctx.session.state = null;
          ctx.session.trips = null;
          ctx.session.selected_trip = null;
          ctx.session.bookings = null;
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
          if (session.user?.role === 'driver') {
            await showDriverMenu(ctx, knex);
          } else if (session?.user?.role === 'passenger') {
            await showPassengerMenu(ctx);
          } else {
            await showRoleMenu(ctx);
          }
          return true;
        }
    
        // /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
        if (ctx.message && ctx.message.text === '/start') {
          ctx.session = {};
          if (!session.user) {
            await ctx.reply(`üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ PoezdkaKrasBot!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–µ–∑–¥–∫—É üöó
–ü–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º—É –ö—Ä–∞—é.

üìå –í–æ–¥–∏—Ç–µ–ª—è–º ‚Äî —É–¥–æ–±–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã
üìå –ü–∞—Å—Å–∞–∂–∏—Ä–∞–º ‚Äî –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞

<a href="https://poezdkabot.ru/offer.html">–û—Ñ–µ—Ä—Ç–∞ –ø–æ –æ–∫–∞–∑–∞–Ω–∏—é —É—Å–ª—É–≥</a>`, { parse_mode: 'HTML' })
            await showRoleMenu(ctx);
          } else if (session.user?.role === 'driver') {
            await showDriverMenu(ctx, knex);
          } else if (session.user?.role === 'passenger') {
            await showPassengerMenu(ctx);
          }
          return true;
        }

        if (ctx.message && ctx.message.text === '/support') {
          await ctx.reply(`–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @PoezdkaSupport`)
          return true
        }
        // –í—ã–±–æ—Ä —Ä–æ–ª–∏
        if (ctx.session?.state === 'choose_role' && ctx.message && (ctx.message.text === '–í–æ–¥–∏—Ç–µ–ª—å' || ctx.message.text === '–ü–∞—Å—Å–∞–∂–∏—Ä')) {
          const role = ctx.message.text === '–í–æ–¥–∏—Ç–µ–ª—å' ? 'driver' : 'passenger';
          if (session?.user) {
            await knex('users').where({ telegram_id: ctx.from.id }).update({ role });
          } else {
            await knex('users').insert({ telegram_id: ctx.from.id, name: ctx.from.first_name || '', phone: '', role });
          }
          ctx.session.state = null;
          if (role === 'driver') {
            const videoUrl = await getSetting('training_video_url')
            if (videoUrl) {
              try {
                await ctx.replyWithVideo(videoUrl, { caption: '–í–∏–¥–µ–æ –æ–±—É—á–µ–Ω–∏—è' })
              } catch (e) { console.log('Error video reply', e) }
            }
            await showDriverMenu(ctx, knex);
          } else {
            await showPassengerMenu(ctx);
          }
          return true;
        }
    
        // –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (ctx.message && ctx.message.text === '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞') {
          await handleChangePhone(ctx);
          return true;
        }
        // –ë–æ–Ω—É—Å—ã (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω)
        if (ctx.message && ctx.message.text === '–ë–æ–Ω—É—Å—ã') {
          const bonusUrl = await getSetting('bonus_banner_url');
          if (bonusUrl) {
            await ctx.replyWithPhoto(bonusUrl, { caption: '–ù–∞—à–∏ –±–æ–Ω—É—Å—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π' });
          }
        }
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        if (ctx.message && ctx.message.text === '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
          const driver = session.user;
          // –ü–µ—Ä–∏–æ–¥—ã
          const now = new Date();
          const year = now.getFullYear();
          const month = String(now.getMonth() + 1).padStart(2, '0');
          const monthStart = `${year}-${month}-01`;
          const nextMonth = new Date(year, now.getMonth() + 1, 1);
          const monthEnd = nextMonth.toISOString().slice(0, 10);

          // –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
          const completedTripsTotalRow = await knex('trip_instances as inst')
            .join('trips', 'inst.trip_id', 'trips.id')
            .where('trips.driver_id', driver.id)
            .andWhere('inst.status', 'completed')
            .count({ count: 'inst.id' })
            .first();

          // –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–µ–∑—ë–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∞—Ö)
          const passengerCountRow = await knex('bookings')
            .join('trip_instances', 'bookings.trip_instance_id', 'trip_instances.id')
            .join('trips', 'trip_instances.trip_id', 'trips.id')
            .where('trips.driver_id', driver.id)
            .andWhere('trip_instances.status', 'completed')
            .andWhere('bookings.confirmed', true)
            .sum({ count: 'bookings.seats' })
            .first();

          // –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
          const completedTripsMonthRow = await knex('trip_instances as inst')
            .join('trips', 'inst.trip_id', 'trips.id')
            .where('trips.driver_id', driver.id)
            .andWhere('inst.status', 'completed')
            .andWhere('inst.departure_date', '>=', monthStart)
            .andWhere('inst.departure_date', '<', monthEnd)
            .count({ count: 'inst.id' })
            .first();

          // –ü–µ—Ä–µ–≤–µ–∑—ë–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
          const passengerCountMonthRow = await knex('bookings')
            .join('trip_instances', 'bookings.trip_instance_id', 'trip_instances.id')
            .join('trips', 'trip_instances.trip_id', 'trips.id')
            .where('trips.driver_id', driver.id)
            .andWhere('trip_instances.status', 'completed')
            .andWhere('bookings.confirmed', true)
            .andWhere('trip_instances.departure_date', '>=', monthStart)
            .andWhere('trip_instances.departure_date', '<', monthEnd)
            .sum({ count: 'bookings.seats' })
            .first();

          const completedCount = Number(completedTripsTotalRow?.count ?? 0);
          const passengerCount = Number(passengerCountRow?.count ?? 0);
          const completedCountMonth = Number(completedTripsMonthRow?.count ?? 0);
          const passengerCountMonth = Number(passengerCountMonthRow?.count ?? 0);
          let msg = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è:\n` +
            `–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫: ${completedCount}\n` +
            `–ü–µ—Ä–µ–≤–µ–∑–µ–Ω–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${passengerCount}`;
          msg += `\n\n–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:`;
          msg += `\n–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫: ${completedCountMonth}`;
          msg += `\n–ü–µ—Ä–µ–≤–µ–∑–µ–Ω–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${passengerCountMonth}`;
          await ctx.reply(msg);
          return true;
        }
        // –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –∏–∑ –º–µ–Ω—é
        if (ctx.message && ctx.message.text === '–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å') {
          await showRoleMenu(ctx);
          ctx.session.state = 'choose_role';
          return true;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        if (session.user && ctx?.session?.user?.role === 'driver' && ctx?.message?.text === '–ö–∞–±–∏–Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è') {
          await showDriverMenu(ctx, knex);
          return true;
        }
        if (session.user && ctx?.session?.user?.role === 'passenger' && ctx?.message?.text === '–ö–∞–±–∏–Ω–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞') {
          await showPassengerMenu(ctx);
          return true;
        }
    
        await next();
      } catch (error) {
        console.error('Error in commonLogic:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
    } catch (error) {
      console.error('Error handling common logic:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };
}
